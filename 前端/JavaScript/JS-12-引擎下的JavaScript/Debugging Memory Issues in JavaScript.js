/*
要找到内存问题的根源，我们必须考虑以下问题：
    1.内存是从哪里分配的？
    2.为什么某些内存碎片没有被收集？
    3.内存使用量如何随时间增长？
*/

/*
内存检查器中提供了几种不同的工具：
    堆快照（Heap Snapshot）：此工具向您展示内存如何在页面的 JavaScript 对象和相关 DOM 节点之间分配。
    时间轴上的分配检测（Allocation instrumentation on timeline）：该工具显示一段时间内 JavaScript 内存分配情况，可用于隔离内存泄漏。
    分配采样（Allocation sampling）：我们可以使用采样方法来记录内存分配。该工具最适合长时间运行的操作。
*/

/*
distance(距离)
    使用从窗口/根开始的最短节点路径，这是该路径上的节点数。
*/

/*
shallow size(浅大小)
    "shallow size" 是指一个对象自身占用的内存大小，而不包括它引用的其他对象的大小。这个概念通常用于内存分析和性能优化中。

    在 JavaScript 中，对象的 "shallow size" 取决于它的属性和值的数量、类型和大小。
    例如，一个包含数值、字符串和布尔值属性的对象的 "shallow size" 将比一个只包含一个数值属性的对象大。
*/

/*
retained size(保留大小)
    "retained size"（保留大小）是指一个对象及其所有可访问的对象所占用的总内存大小。
    它表示了一个对象在内存中实际占用的空间，包括对象本身以及它引用的其他对象。

    在内存管理中，"retained size" 是一个重要的概念，用于评估对象的内存占用和分析内存泄漏。
    当一个对象不再被其他对象引用时，它占用的内存可以被垃圾回收机制回收。
    通过计算对象的 "retained size"，可以确定哪些对象是保留的，即仍然可访问的，从而帮助识别内存泄漏的来源。
*/
