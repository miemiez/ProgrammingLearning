/*
JavaScript 有两种内存数据结构：
    堆（the heap）
    堆栈（the stack）

当为变量赋值时，JavaScript 引擎的任务是确定该值是原始值还是参考值。结果确定该值是存储在堆中还是堆栈中。
*/

/*
The stack：
    堆栈用于静态存储，其中对象的大小在编译代码时是已知的。由于大小已知，因此为对象保留了固定数量的数据，并且堆栈保持有序。
    堆栈具有由操作系统提供的有限空间，通常只有在代码中出现问题（例如无限递归或内存泄漏）时才会超过该空间。

    原始值、对非原始值的引用和函数调用帧存储在堆栈中。可以将引用视为一个巨大（但无序）的停车场中的停车位编号，
    它告诉 JavaScript 去哪里寻找对象和函数。
*/

/*
The heap:
    堆在运行时为没有固定大小的数据类型（如对象和函数）提供动态内存分配。这些是引用值，我们使用堆栈中的固定大小引用来
    跟踪在非结构化堆中找到它们的位置。如果修改对象，则修改的是对该对象的引用，而不是对象本身。
*/

/*
内存生命周期（主要分为3个部分）:
    1.内存分配（值声明并存储在内存中）
    2.正在使用的内存（读取或重写值）
    3.释放内存（值不再使用并从内存中删除）
*/

/*
内存分配:
    当创建变量或声明值时，会分配内存，这可以通过多种方式启动：
        1.常规变量赋值
        2.为对象分配属性
        3.声明可调用函数
        4.调用函数
*/

/*
使用中的内存:
    当读写分配的内存时，内存正在使用，包括以下任务:
        1.变量重新分配
        2.使用变量
        3.将参数传递给函数
*/

/*
RAM(Random Access Memory):
    也就是所谓的 【运行内存】 ，它是计算机用于临时存储正在运行的程序和数据的主要存储器。
    当计算机运行时，操作系统会将程序和数据加载到RAM中，以便CPU能够快速访问和处理它们。
    RAM的大小和性能对计算机的整体速度和运行能力有重要影响。
*/

/*
内存泄漏：
    当程序不再需要的内存仍然存在时，称为内存泄漏。
    内存应该返回到空闲内存池以供将来的对象使用。当垃圾收集无法找到与根对象失去连接的对象时，
    或者当对象大小增大并被其他对象引用时，可能会发生内存泄漏。发生这种情况时，可能会导致代码速度变慢、崩溃和高延迟。
*/