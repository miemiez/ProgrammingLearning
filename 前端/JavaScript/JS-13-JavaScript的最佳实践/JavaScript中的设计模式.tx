一.实现设计模式的解决方案往往是：
    (1)DRY（不要重复自己）
    (2)模块化的
    (3)可重复使用的
    (4)更容易维护
    (5)更容易与高层同行讨论（而不是深入研究实施细节）


二.反设计模式
    与作为最佳实践的设计模式相反，反模式描述了导致不良情况发生的问题的无效解决方案，例如：
    (1)命名空间污染——来自不同客户端交互的意外行为
    (2)代码复杂度增加
    (3)代码难以理解和更新
    (4)测试和调试代码困难


三.设计模式通常分为一个分类方案，该方案具有三个基于目的的类别：
    (1)创意型
        1.工厂
        2.辛格尔顿
        3.抽象工厂
        4.构造函数
        5.原型
    (2)结构型
        1.正面
        2.代理人
        3.蝇量级
        4.适配器
        5.装饰者
        6.合成的
        7.桥
    (3)行为型
        1.迭代器
        2.调解员
        3.观察者
        4.游客


四.总结：
    如何选择正确的设计模式:
        由于需要考虑如此多的模式和反模式，因此需要时间来完善您的设计模式选择过程。您可以采取几个步骤来选择合适的设计模式:
            (1)考虑每个对象的接口以及它将如何与其他对象交互。您是否在每个对象中封装了正确的信息，或者应该创建新类型的对象？
            (2)考虑每个对象的规范以及如何处理每个属性。还有哪些对象需要了解该对象的属性？您将如何处理更新？
            (3)记住每组设计模式的高层意图。如果您正在针对对象行为而不是对象的创建方式进行设计，请查看“行为”类别中的设计模式选项。
            (4)选择设计后，检查该设计，看看是否有任何理由应该选择不同的设计。有什么需要重构的东西，或者有一个看起来很难处理的问题吗？
            (5)您是否想在不重新设计代码的情况下更改任何内容？您可以使用当前选择的设计模式来做到这一点吗？或者您需要引入另一种模式吗？
               请记住，您可以在同一代码库中使用多种不同的设计模式。