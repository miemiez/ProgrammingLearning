package Git学习;

public class F_Git分支 {
	/*
	 * 一.查看分支：
	 *     命令：git branch
	 * 二.创建本地分支
	 *     命令：git branch 分支名
	 * 三.***切换分支（checkout）***
	 *     命令：git checkout 分支名
	 *     我们还可以直接切换到一个不存在的分支（创建并切换）
	 *     命令：git checkout -b 分支名
	 * 四.***合并分支（merge）***
	 *     一个分支上的提交可以合并到另一个分支
	 *     命令：git merge 分支名称
	 * 五.删除分支
	 *     git branch -d b1 删除分支时，需要做各种检查
	 *     git branch -D b1 不做任何检查，强制删除（如果该分支上有已经提交的内容且没有被
	 *     其他分支合并的话，-d 就无法删除，只能用 -D 进行删除）
	 *     
	 * 六.解决冲突
	 *     当两个分支上对文件的修改可以会存在冲突，例如同时修改了同一个文件的同一行，这时
	 *     就需要手动解决冲突，解决冲突步骤如下：
	 *         1.处理文件中冲突的地方
	 *         2.将解决完冲突的文件加入暂存区（add）
	 *         3.提交到仓库（commit）
	 *         
	 * 七.开发中分支使用原则与流程
	 *     几乎所有的版本控制系统都以某种形式支持分支，使用分支意味着你可以把你的工作从开
	 *     发主线上分离开来进行重大的Bug修改，开发新的功能，以免影响开发主线。
	 *     在开发中，一般有如下分支使用原则与流程：
	 *         master（生产）分支
	 *             线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；
	 *         develop（开发）分支
	 *             是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行
	 *             开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并
	 *             到master分支，准备上线
	 *         feature/xxxx分支
	 *             从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分
	 *             支上的研发任务完成后合并到develop分支
	 *         hotfix/xxxx分支
	 *             从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master，
	 *             test，develop分支
	 *         还有一些其他分支，在此不再详述，例如test分支（用于代码测试），pre分支（预上
	 *         线分支）等等。
	 */
}
