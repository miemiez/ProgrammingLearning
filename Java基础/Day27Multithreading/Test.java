package Day27Multithreading;

public class Test {
	public static void main(String[] args) {
		/*
		 * 一：进程与线程
		 *     （1）进程：
		 *         1.进程是资源分配的最小单位，cpu从硬盘中读取一段程序到内存中，该执行程序的实例就叫做进程
		 *         2.一个程序如果被cpu多次读取到内存中，则变成多个独立的进程
		 *     （2）线程：
		 *         线程是程序执行的最小单位，在一个进程中可以有多个不同的线程同时执行。
		 *         
		 * 二：在同一个应用程序中（进程），利用线程可以更好的进行并行处理。（多线程大部分情况是可以提高运行效率的）
		 * 
		 * 三.CPU调度时间片  与  上下文切换：
		 *     （1）单核的cpu上每次只能运行一个线程，如果在单核的cpu上开启了多线程，则会发生对每个线程轮流执行；
		 *          （上下文切换：每次调用一个线程，该线程状态就从就绪状态切换为运行状态，如果切换执行到下一个线程，则当前线程状态就从运行状态切换回就绪状态）
		 *     （2）Cpu每次单个计算的时间成为一个cpu时间片，实际只有几十毫秒，所以人的感觉好像是在多线程（但是底层执行的时候并不是真正的意义上的多线程）。
		 *     （3）程序计数器：当从下一个线程又切换回当前线程时，如果当前线程前面已经执行过了，则会因为程序计数器的存在，而继续从上一次执行结束的地方继续执行下去
		 *     
		 * 四：多线程也有时候不会提高效率：
		 *     如果在生产环境中开启几百个或者上千个线程，而服务器的核数为8核或者16核或者32核，那么这么多的线程都会在这些cpu上做上下文切换（这就会导致在生产环境中做大量的cpu争抢，这会降低运行效率）
		 *     ***所以我们在创建多线程，或者配置线程池的时候最好匹配服务器cpu核数（即：服务器cpu核数有多少个就创建小于等于这个数量的线程）***
		 */
	}
}
